import type { NextPage } from "next";
import Head from "next/head";
import { useState, useEffect, useCallback } from "react";
import Recorder from "@/utils/recorder";
import * as styles from "@/styles/rec.css";

/**
 * サンプラー
 */
const Rec: NextPage = () => {
  const [recorder, setRecorder] = useState(new Recorder());

  const startUserMedia = useCallback((stream) => {
    if (!process.browser) return;

    const audioContext = window.AudioContext || window.webkitAudioContext;
    const input = audioContext.createMediaStreamSource(stream);
    audioContext.resume();
    // __log('Media stream created.');

    setRecorder(new Recorder(input));
    // __log('Recorder initialised.');
  }, []);

  const startRecording = useCallback((button) => {
    console.log(button, recorder);
    recorder && recorder.record();
    // button.disabled = true;
    // button.nextElementSibling.disabled = false;
    // __log('Recording...');
  }, []);

  const createDownloadLink = useCallback(() => {
    recorder &&
      recorder.exportWAV((blob: any) => {
        var url = URL.createObjectURL(blob);
        var li = document.createElement("li");
        var au = document.createElement("audio");
        var hf = document.createElement("a");

        au.controls = true;
        au.src = url;
        hf.href = url;
        hf.download = new Date().toISOString() + ".wav";
        hf.innerHTML = hf.download;
        // li.appendChild(au);
        // li.appendChild(hf);
        // recordingslist.appendChild(li);
      });
  }, [recorder]);

  const stopRecording = useCallback(
    (button) => {
      recorder && recorder.stop();
      button.disabled = true;
      button.previousElementSibling.disabled = false;
      // __log('Stopped recording.');

      // create WAV download link using audio data blob
      createDownloadLink();

      recorder?.clear();
    },
    [createDownloadLink, recorder]
  );

  useEffect(() => {
    // try {
    //   // webkit shim
    //   window.AudioContext = window.AudioContext || window.webkitAudioContext;
    //   if (navigator.mediaDevices === undefined) {
    //     navigator.mediaDevices = {};
    //   }
    //   if (navigator.mediaDevices.getUserMedia === undefined) {
    //     navigator.mediaDevices.getUserMedia = function (constraints) {
    //       // First get ahold of the legacy getUserMedia, if present
    //       let getUserMedia =
    //         navigator.getUserMedia ||
    //         navigator.webkitGetUserMedia ||
    //         navigator.mozGetUserMedia;
    //       // Some browsers just don't implement it - return a rejected promise with an error
    //       // to keep a consistent interface
    //       if (!getUserMedia) {
    //         return Promise.reject(
    //           new Error("getUserMedia is not implemented in this browser")
    //         );
    //       }
    //       // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise
    //       return new Promise(function (resolve, reject) {
    //         getUserMedia.call(navigator, constraints, resolve, reject);
    //       });
    //     };
    //   }
    //   window.URL = window.URL || window.webkitURL;
    //   audio_context = new AudioContext();
    //   // __log('Audio context set up.');
    //   // __log('navigator.mediaDevices ' + (navigator.mediaDevices.length != 0 ? 'available.' : 'not present!'));
    // } catch (e) {
    //   alert("No web audio support in this browser!");
    // }
    navigator.mediaDevices
      .getUserMedia({ audio: true })
      .then((stream) => {
        console.log(stream);
        startUserMedia(stream);
      })
      .catch((e) => {
        // __log('No live audio input: ' + e);
      });
  });

  return (
    <div className={styles.containerCls}>
      <Head>
        <title>iDeath</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="initial-scale=1.0, width=device-width" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.mainCls}>
        <h1 className={styles.titleCls}>Rec</h1>
        <div>
          <button onClick={startRecording}>record</button>
          <button onClick={stopRecording} disabled>
            stop
          </button>
        </div>
        <div>
          <h2>Recordings</h2>
          <ul id="recordingslist"></ul>
          <h2>Log</h2>
          <pre id="log"></pre>
        </div>
      </main>
    </div>
  );
};

export default Rec;
